package pattern

/*
	Реализовать паттерн «фабричный метод».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Factory_method_pattern
*/
//Фабричный метод — это порождающий паттерн проектирования, который определяет общий интерфейс для создания объектов в суперклассе, позволяя подклассам изменять тип создаваемых объектов.
//Применимость
//Когда заранее неизвестны типы и зависимости объектов, с которыми должен работать ваш код.
//Когда вы хотите дать возможность пользователям расширять части вашего фреймворка или библиотеки.
//Когда вы хотите экономить системные ресурсы, повторно используя уже созданные объекты, вместо порождения новых.
//+:
/*Избавляет класс от привязки к конкретным классам продуктов.
Выделяет код производства продуктов в одно место, упрощая поддержку кода.
Упрощает добавление новых продуктов в программу.
Реализует принцип открытости/закрытости.*/
//-:
/*Может привести к созданию больших параллельных иерархий классов, так как для каждого класса продукта надо создать свой подкласс создателя.*/
type Button interface {
	render()
	onClick(bool)
}

type HTMLButton struct {
	button string
}

func (HTMLButton) render() {}

func (HTMLButton) onClick(f bool) {}

type HTMLDialog struct {
	HTMLButton
}

func NewHTMLDialog() *HTMLDialog {
	return &HTMLDialog{
		HTMLButton: HTMLButton{
			button: "Завершить диалог",
		},
	}
}
