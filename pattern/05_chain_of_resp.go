package pattern

/*
	Реализовать паттерн «цепочка вызовов».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Chain-of-responsibility_pattern
*/
/*Цепочка обязанностей — это поведенческий паттерн проектирования, который позволяет передавать запросы последовательно по цепочке обработчиков. Каждый последующий обработчик решает, может ли он обработать запрос сам и стоит ли передавать запрос дальше по цепи.*/
/* Применимость
Когда программа должна обрабатывать разнообразные запросы несколькими способами, но заранее неизвестно, какие конкретно запросы будут приходить и какие обработчики для них понадобятся.*/
/*Когда важно, чтобы обработчики выполнялись один за другим в строгом порядке.*/
// Когда набор объектов, способных обработать запрос, должен задаваться динамически.
//+
//Уменьшает зависимость между клиентом и обработчиками.
// Реализует принцип единственной обязанности.
//Реализует принцип открытости/закрытости.
//-:Запрос может остаться никем не обработанным.
type Request interface {
	execute(string)
	gonext(Request)
}

type Auth struct {
	next Request
}

func (a *Auth) execute(req string) {
	//код
	a.next.execute(req)
}

func (a *Auth) gonext(handler Request) {
	a.next = handler
}

type User struct {
	next Request
}

func (a *User) execute(req string) {
	//код
	//a.next.execute(req) - если структура не последняя
}

func (a *User) gonext(handler Request) {
	a.next = handler
}

//и т.д

func main() {
	a := Auth{}
	b := User{}
	a.gonext(b)
	a.execute("/auth/login")
	b.execute("/user_request")
}
