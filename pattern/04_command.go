package pattern

/*
	Реализовать паттерн «комманда».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Command_pattern
*/
//Команда — это поведенческий паттерн проектирования, который превращает запросы в объекты, позволяя передавать их как аргументы при вызове методов, ставить запросы в очередь, логировать их, а также поддерживать отмену операций.
/*Применимость:
Когда вы хотите параметризовать объекты выполняемым действием.
Когда вы хотите ставить операции в очередь, выполнять их по расписанию или передавать по сети.
Когда вам нужна операция отмены.
*/
/*+
Убирает прямую зависимость между объектами, вызывающими операции, и объектами, которые их непосредственно выполняют.
 Позволяет реализовать простую отмену и повтор операций.
 Позволяет реализовать отложенный запуск операций.
 Позволяет собирать сложные команды из простых.
 Реализует принцип открытости/закрытости.*/
/*-
Усложняет код программы из-за введения множества дополнительных классов.*/
type Command interface {
	execute()
}

type CopyCommand struct{}

func (CopyCommand) execute() {}

type CutCommand struct{}

func (CutCommand) execute()

type CommandHistory struct {
	command []Command
}

func (CommandHistory) push(c Command) {}

func (CommandHistory) pop() Command {
	return CopyCommand{} //Логика для вывода любой другой команды
}

type Editor struct {
	text string
}

func (Editor) getSelection() {
}
