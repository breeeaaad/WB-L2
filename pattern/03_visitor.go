package pattern

/*
	Реализовать паттерн «посетитель».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Visitor_pattern
*/
//Поведенческий паттерн проектирования, который позволяет добавлять в программу новые операции, не изменяя классы объектов, над которыми эти операции могут выполняться.
//+
/*Упрощает добавление операций, работающих со сложными структурами объектов.
Объединяет родственные операции в одном классе.
Посетитель может накапливать состояние при обходе структуры элементов.*/
//-
/*Паттерн не оправдан, если иерархия элементов часто меняется.
Может привести к нарушению инкапсуляции элементов.*/
//Применимость
/*Когда вам нужно выполнить какую-то операцию над всеми элементами сложной структуры объектов, например, деревом.*/
/*Когда над объектами сложной структуры объектов надо выполнять некоторые не связанные между собой операции, но вы не хотите «засорять» классы такими операциями.*/
/*Когда новое поведение имеет смысл только для некоторых классов из существующей иерархии.*/
type Shape interface {
	//Any methods
	accept(v Visitor)
}

type Circle struct {
}

func (Circle) accept(v Visitor) {}

type Dot struct {
}

func (Dot) accept(v Visitor) {}

type Visitor interface {
	visitDot(d Dot)
	visitCircle(c Circle)
}

type XMLExportVisitor struct{}

func (XMLExportVisitor) visitDot(d Dot) {}

func (XMLExportVisitor) visitCircle(c Circle) {}
